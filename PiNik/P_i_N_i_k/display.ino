byte logo_bmp[] = { B00000000, B11000000, B00000001, B11000000,
                    B00000001, B11000000, B00000011, B11100000,
                    B11110011, B11100000, B11111110, B11111000,
                    B01111110, B11111111, B00110011, B10011111,
                    B00011111, B11111100, B00001101, B01110000,
                    B00011011, B10100000, B00111111, B11100000,
                    B00111111, B11110000, B01111100, B11110000,
                    B01110000, B01110000, B00000000, B00110000
                  };

const unsigned char roboadda [] PROGMEM = {
  // 'logo, 128x64px
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf9, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe0, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xc3, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xcc, 0x79, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe0, 0x78, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x9e, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x1f, 0x08, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x9e, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xcc, 0x44, 0x40, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe0, 0x10, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0x60, 0x1f, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf8, 0xc0, 0xff, 0xf0, 0xff, 0xff, 0xc7, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 
  0xff, 0xe3, 0xf9, 0xf8, 0x7f, 0xfc, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x3f, 0xff, 
  0xff, 0xc7, 0xf9, 0xdc, 0x3f, 0xe0, 0x00, 0x0f, 0xf1, 0xff, 0xfc, 0x1f, 0xff, 0xf0, 0x3f, 0xff, 
  0xff, 0x8f, 0x39, 0xce, 0x3f, 0x83, 0xff, 0x83, 0xff, 0xff, 0xff, 0xcf, 0xf1, 0x00, 0x07, 0xff, 
  0xff, 0x8e, 0x79, 0xe7, 0x1f, 0x0f, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xe7, 0xe0, 0x00, 0x00, 0x3f, 
  0xff, 0x8c, 0xf9, 0xf3, 0x1e, 0x1f, 0xf9, 0xf0, 0xfb, 0xf7, 0xff, 0xe7, 0xe0, 0x00, 0x00, 0x1f, 
  0xff, 0x9c, 0xf9, 0xf3, 0x9c, 0x7f, 0xf3, 0xfc, 0x61, 0xe0, 0x07, 0xf7, 0xf0, 0x00, 0x00, 0x0f, 
  0xff, 0x9c, 0xff, 0xfb, 0x98, 0xff, 0xf3, 0xfc, 0x31, 0xe3, 0xe3, 0xf3, 0xe0, 0x07, 0x00, 0x3f, 
  0xff, 0x9c, 0xff, 0xf3, 0x98, 0xfc, 0xf2, 0xfe, 0x33, 0xff, 0xf3, 0xf7, 0xc0, 0x3f, 0xe0, 0x1f, 
  0xff, 0x8c, 0xff, 0xf3, 0x11, 0xf8, 0xe6, 0x3f, 0x13, 0xfe, 0xf3, 0xe7, 0xc0, 0x7f, 0xf0, 0x1f, 
  0xff, 0x8e, 0x7f, 0xe7, 0x11, 0xe1, 0xe7, 0x1f, 0x13, 0xfc, 0x07, 0xc3, 0x80, 0xff, 0xf8, 0x0f, 
  0xff, 0xc7, 0x3f, 0xce, 0x33, 0xc7, 0xe7, 0xc7, 0x13, 0xfc, 0x7e, 0x06, 0x01, 0xf8, 0xf8, 0x0f, 
  0xff, 0xc3, 0x80, 0x1c, 0x23, 0x8f, 0xe7, 0xe1, 0x93, 0xff, 0xfe, 0x1e, 0x01, 0xf0, 0x7c, 0x03, 
  0xff, 0xe1, 0xe0, 0x78, 0x63, 0x3f, 0xcf, 0xf9, 0x93, 0xff, 0xfe, 0x0e, 0x01, 0xf0, 0x7c, 0x03, 
  0xff, 0xf0, 0xff, 0xe0, 0xf3, 0x1f, 0xcf, 0xf1, 0x13, 0xe0, 0x1f, 0xe7, 0x81, 0xf0, 0x7c, 0x03, 
  0xff, 0xf0, 0x0f, 0x03, 0xf1, 0x8f, 0xdf, 0xe3, 0x13, 0xe0, 0x01, 0xf3, 0x80, 0xff, 0xf8, 0x03, 
  0xff, 0xf0, 0x00, 0x0f, 0xf1, 0xe3, 0x9f, 0x8f, 0x13, 0xff, 0xf9, 0xf9, 0xc0, 0xff, 0xf8, 0x1f, 
  0xff, 0xf1, 0xc0, 0x3f, 0xf8, 0xf1, 0x9e, 0x1f, 0x13, 0xff, 0xf9, 0xf9, 0xc0, 0x7f, 0xf0, 0x1f, 
  0xff, 0xf1, 0xfe, 0x07, 0xf8, 0xfc, 0x9e, 0x7e, 0x31, 0x1f, 0xf1, 0xf9, 0xc0, 0x1f, 0xc0, 0x3f, 
  0xff, 0xf1, 0xff, 0x87, 0xfc, 0x7e, 0x3e, 0xfc, 0x60, 0x00, 0x03, 0xf9, 0xc0, 0x00, 0x00, 0x7f, 
  0xff, 0xf1, 0xff, 0xe0, 0xfc, 0x3f, 0xff, 0xf8, 0xf3, 0x3f, 0xff, 0xf3, 0x80, 0x00, 0x00, 0x3f, 
  0xff, 0xf1, 0xff, 0xe0, 0xfe, 0x1f, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xf3, 0xc0, 0x00, 0x00, 0x1f, 
  0xff, 0xf1, 0xff, 0xfc, 0x1f, 0x87, 0xff, 0xc3, 0xff, 0xfe, 0xff, 0xc7, 0xf7, 0x00, 0x00, 0x3f, 
  0xff, 0xf1, 0xff, 0xfc, 0x1f, 0xc0, 0x7c, 0x07, 0xf1, 0xfe, 0xdc, 0x1f, 0xff, 0xe0, 0x30, 0x7f, 
  0xfe, 0x00, 0x0f, 0xfc, 0x8f, 0xf0, 0x00, 0x1f, 0xf0, 0x00, 0xc0, 0x7f, 0xff, 0xe0, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0x83, 0xfe, 0x00, 0xff, 0xf1, 0xfe, 0xdf, 0xff, 0xff, 0xe0, 0xf0, 0x7f, 
  0xff, 0x80, 0x3f, 0xff, 0xd0, 0xdf, 0xff, 0xff, 0xfc, 0x0e, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 0x7f, 0xfc, 0x0c, 0x0e, 0xf8, 0x3f, 0xf8, 0x7f, 0xf0, 0x7f, 
  0xff, 0xc0, 0xff, 0xff, 0xff, 0x98, 0x1f, 0xfd, 0xcc, 0xcb, 0xf8, 0x3f, 0xf0, 0x7f, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x07, 0xfd, 0xcc, 0xcb, 0xf8, 0x3f, 0xf0, 0x7f, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0x1f, 0x80, 0x63, 0xfd, 0xcc, 0xcb, 0xf8, 0x3f, 0xf0, 0x7f, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xfe, 0x7f, 0x80, 0xe1, 0xfd, 0xcc, 0xcb, 0xf8, 0x3f, 0xf0, 0x7f, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xfc, 0x7f, 0x81, 0xcc, 0xfd, 0xcc, 0xcb, 0xf8, 0x3f, 0xf0, 0x7f, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xf8, 0xff, 0x83, 0x9e, 0xfd, 0xcc, 0xcb, 0xf8, 0x3f, 0xf0, 0x7f, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xf9, 0xff, 0x87, 0x3e, 0x7d, 0xcc, 0xcb, 0xf8, 0x3f, 0x70, 0x7f, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xf9, 0xff, 0x8f, 0x7f, 0x7d, 0xcc, 0xcb, 0xfc, 0x3e, 0x70, 0x7f, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xf1, 0xff, 0x9e, 0x7f, 0x7d, 0xcc, 0xcb, 0xfe, 0x3c, 0x70, 0x7e, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xf3, 0xff, 0xfc, 0xff, 0x7d, 0xcc, 0xcb, 0xff, 0x10, 0x78, 0x7c, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xf3, 0xff, 0xf9, 0xff, 0x7d, 0xcc, 0xcb, 0xfe, 0x00, 0xf8, 0x78, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xf1, 0xff, 0xf3, 0xff, 0x7d, 0xcc, 0xcd, 0xf8, 0x00, 0xf8, 0x70, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xf9, 0xff, 0xe7, 0xff, 0x7d, 0xcc, 0xcd, 0xe0, 0x01, 0xfc, 0x00, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xf8, 0xff, 0xcf, 0xff, 0x09, 0xcc, 0xce, 0x00, 0x01, 0xfc, 0x00, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xfc, 0xff, 0xdf, 0xff, 0xe1, 0xcc, 0xcf, 0x80, 0x07, 0xf0, 0x00, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xfc, 0x7f, 0x9f, 0xff, 0xff, 0xcc, 0xcf, 0xf0, 0x1f, 0xc0, 0x01, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xfe, 0x3f, 0x3f, 0xf8, 0xff, 0xcc, 0xcf, 0xff, 0xee, 0x00, 0x01, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0x0e, 0x7f, 0xe2, 0x0f, 0xcc, 0xcf, 0xff, 0xf0, 0x00, 0x03, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xcf, 0xe1, 0xcc, 0xcf, 0xff, 0xfc, 0x00, 0x0f, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0xe1, 0xfe, 0x3f, 0xfd, 0xcc, 0xcf, 0xff, 0xff, 0x00, 0x3f, 0xf0, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xfc, 0x0c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f
};

void text(String t, byte x, byte y) {
  display.setCursor(x, y);
  display.print(t);
}

void pinik() {
  display.clearDisplay();
  display.drawBitmap(0, 0, roboadda, 128, 64, 1);
  display.display();
}

void analog_reading_display() {
  byte i = 0;
  display.clearDisplay();
  for (i = 0; i < 6; i++)  sensor[i] = analogRead(i + 8);
  for (i = 0; i < 3 ; i++) {
    value = String(sensor[i], 10);
    text(value, 72, 46 - (i * 22));
  }
  for (i = 3; i < 6; i++) {
    value = String(sensor[i], 10);
    text(value, 12,  (i * 22) - 64);
  }
  display.display();
}

void digital_reading_display() {
  display.clearDisplay();
  check();
  for (short int i = 5; i >= 0; i--) {
    value = String(sensor[i], 2);
    text(value, 115 - (i * 23), 0);
  }
  value = String(sum, 10); text("sum = " + value, 0, 25);
  value = String(bin, 10); text("bin = " + value, 0, 50);
  display.display();
}

void text_line_follow() {
  display.clearDisplay();
  text("LineFollow", 4, 12);
  text("C", 0, 38);
  text(":", 10, 38);
  value = String(counter, 10); text(value, 20, 38);
  text("S", 55, 38); text(":", 65, 38);
  value = String(sp, 10); text(value, 75, 38);
  side = EEPROM.read(9) / 100;
  if (side == 0) text("S", 116, 38);
  else if (side == 1) text("R", 116, 38);
  else if (side == 2) text("L", 116, 38);
  display.display();
}

void text_maze_follow() {
  display.clearDisplay();
  text("   MAZE   ", 4, 0);
  text(" FUNCTION ", 4, 25);
  text("C", 0, 50); text(":", 10, 50);
  value = String(counter, 10); text(value, 20, 50);
  text("S", 55, 50); text(":", 65, 50);
  value = String(sp, 10); text(value, 75, 50);
  side = EEPROM.read(9) / 100;
  if (side == 0) text("S", 116, 50);
  else if (side == 1) text("R", 116, 50);
  else if (side == 2) text("L", 116, 50);
  display.display();
}

void text_speed_adjust() {
  display.clearDisplay();
  text("SPEED", 35, 0);
  text("ADJUST", 29, 25);
  text("S:    E:  ", 0, 50);
  short int p = sp * 10;
  value = String(p, 10); text(value, 23, 50);
  p = spe;
  value = String(p, 10); text(value, 92, 50);
  display.display();
}

void sonar_reading_display() {
  sonar();
  display.clearDisplay();
  text("L   F   R", 10, 12);
  value = String(sl, 10); text(value, 5, 38);
  value = String(sf, 10); text(value, 52, 38);
  value = String(sr, 10); text(value, 99, 38);
  display.display();
}

void serial_reading_display() {
  int i = 0;
  display.clearDisplay();
  display.display();
  display.setTextSize(1);
  display.setCursor(2, 0);
  display.invertDisplay(1);
  while (digitalRead(mb) == HIGH) {
    if (Serial.available() > 0) {
      if (i == 8) {
        display.clearDisplay();
        i = 0;
        display.setCursor(2, 0);
      }
      display.write(Serial.read());
      if (Serial.available() == 0) {
        i++;
        display.display();
        display.setCursor(2, i * 8);
      }
    }
  }
  display.clearDisplay();
  display.display();
  display.setTextSize(2);
  display.invertDisplay(false);
}

void text_callibrating() {
  byte i;
  display.clearDisplay();
  text(" STARTING ", 04, 18);
  display.display();
  for (i = 0; i < 120; i += 8) {
    if (digitalRead(mb) == LOW) break;
    text(".", i + 2, 32);
    display.display();
  }
  while (digitalRead(mb) == LOW);
  if (i >= 120) cal();
  else
    for (byte i = 0; i < 6; i++) {
      maximum[i] = EEPROM.read(i + 38) * 5;
      minimum[i] = EEPROM.read(i + 44) * 5;
    }
  //for showing the thresould value
  display.clearDisplay();
  display.setTextSize(1);
  for (byte i = 0; i < 6 ; i++) {
    value = String(minimum[i], 10);
    if (i >= 0 && i <= 2) text(value,  32 + (i * 32), 0);
    if (i >= 3 && i <= 5) text(value, (i * 32) - 64, 10);
  }
  for (byte i = 0; i < 6 ; i++) {
    value = String(trash[i], 10);
    if (i >= 0 && i <= 2) text(value,  32 + (i * 32), 23);
    if (i >= 3 && i <= 5) text(value, (i * 32) - 64, 33);
  }
  for (byte i = 0; i < 6 ; i++) {
    value = String(maximum[i], 10);
    if (i >= 0 && i <= 2) text(value,  32 + (i * 32), 46);
    if (i >= 3 && i <= 5) text(value, (i * 32) - 64, 56);
  }
  text("MIN", 8, 5); text("MID", 8, 28); text("MAX", 8, 51);
  display.drawLine(0, 20, 128, 20, WHITE);
  display.drawLine(0, 43, 128, 43, WHITE);
  display.display();
  display.setTextSize(2);
  for (byte i = 0; i < 6; i++) {
    maximum[i] = 0; minimum[i] = 1024;
  }
  while (digitalRead(mb) == HIGH);
  while (digitalRead(mb) == LOW);
}
